# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: My Account Before Each >> Acess Orders
- Location: /Users/renzdeleon/Documents/GitHub/Learn-PLaywright/tests/account.spec.ts:11:9

# Error details

```
Error: locator.fill: Test timeout of 30000ms exceeded.
Call log:
  - waiting for locator('#username')

    at /Users/renzdeleon/Documents/GitHub/Learn-PLaywright/tests/account.spec.ts:6:41
```

# Page snapshot

```yaml
- link "Skip to content"
- banner:
  - link "Practice E-Commerce Site":
    - img "Practice E-Commerce Site"
  - paragraph:
    - link "Practice E-Commerce Site"
  - paragraph: SDET Unicorns
  - navigation:
    - list:
      - listitem:
        - link "Home"
      - listitem:
        - link "About"
      - listitem:
        - link "Shop"
      - listitem:
        - link "Blog"
      - listitem:
        - link "Contact"
      - listitem:
        - link "My account"
  - link:
    - img
  - listitem:
    - link "0":
      - img
      - text: "0"
  - link "Courses"
- heading "My account" [level=1]
- navigation "Breadcrumbs":
  - list:
    - listitem:
      - link "Home"
      - text: /
    - listitem: My account
- main:
  - article:
    - navigation "Account pages":
      - list:
        - listitem:
          - link "Dashboard"
        - listitem:
          - link "Orders"
        - listitem:
          - link "Downloads"
        - listitem:
          - link "Addresses"
        - listitem:
          - link "Account details"
        - listitem:
          - link "Log out"
    - paragraph:
      - text: Hello
      - strong: practiceuser1
      - text: (not
      - strong: practiceuser1
      - text: "?"
      - link "Log out"
      - text: )
    - paragraph:
      - text: From your account dashboard you can view your
      - link "recent orders"
      - text: ", manage your"
      - link "shipping and billing addresses"
      - text: ", and"
      - link "edit your password and account details"
      - text: .
- complementary:
  - search:
    - img
    - text: "Search for:"
    - searchbox "Search for:"
  - heading "Recent Posts" [level=2]
  - list:
    - listitem:
      - link "IFrame Sample"
    - listitem:
      - link "Successful Marketing Ads for Your Business"
    - listitem:
      - link "Let’s Building Your Business from Scratch"
    - listitem:
      - link "The Best Place to Invest Your Money"
    - listitem:
      - link "The Big Seminar for Your Right Investment"
- contentinfo:
  - paragraph: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Elit feugiat sit purus varius. Non in turpis tincidunt nulla. Condimentum ultrices nunc odio ante.
  - heading "Quick Links" [level=2]
  - list:
    - listitem:
      - link "Home"
    - listitem:
      - link "About"
    - listitem:
      - link "Blog"
    - listitem:
      - link "Contact"
    - listitem:
      - link "Support Form"
  - heading "Latest Posts" [level=2]
  - list:
    - listitem:
      - link "IFrame Sample"
    - listitem:
      - link "Successful Marketing Ads for Your Business"
    - listitem:
      - link "Let’s Building Your Business from Scratch"
  - heading "Contact Us" [level=2]
  - paragraph: "Ph. : +(123) 456-7890"
  - paragraph: "Email : first.last@demos.com"
  - paragraph: "Loc : Moon Street , 446 Jupiter"
  - paragraph: "Open : 9AM – 6PM (Mon – Fri)"
  - paragraph:
    - text: Copyright © 2020
    - link "SDET Unicorns"
- status
```

# Test source

```ts
   1 | import { test , expect , Page} from '@playwright/test';
   2 |
   3 | test.describe('My Account Before Each', () => {
   4 |     test.beforeEach(async ({page}) => {
   5 |         await page.goto('/my-account/')
>  6 |         await page.locator('#username').fill('practiceuser1');
     |                                         ^ Error: locator.fill: Test timeout of 30000ms exceeded.
   7 |         await page.locator('#password').fill('PracticePass1!');
   8 |         await page.locator("button[name*='login']").click();
   9 |         await expect(page.locator("a[href*='customer-logout']")).toBeVisible()
  10 |     })
  11 |     test('Acess Orders', async ({page}) => {
  12 |         await page.goto('/my-account/')
  13 |         await page.locator("li a[href*='orders']").click();
  14 |         await expect(page).toHaveURL(/.*orders/);
  15 |     });
  16 |
  17 |     test('Acess Downloads', async ({page}) => {
  18 |         await page.goto('/my-account/')
  19 |         await page.locator("li a[href*='downloads']").click();
  20 |         await expect(page).toHaveURL(/.*downloads/);
  21 |     });
  22 | })
  23 |
  24 | // .serial to run in sequence
  25 | test.describe.serial('My Account Before All', () => {
  26 |     // beforeAll cant use the same page
  27 |     // Workaround is to create a global page
  28 |     let page: Page
  29 |     //Will still fail and need to run in a sequentially
  30 |     test.beforeAll(async ({browser}) => {
  31 |         page = await browser.newPage();
  32 |
  33 |         await page.goto('/my-account/')
  34 |         await page.locator('#username').fill('practiceuser1');
  35 |         await page.locator('#password').fill('PracticePass1!');
  36 |         await page.locator("button[name*='login']").click();
  37 |         await expect(page.locator("a[href*='customer-logout']")).toBeVisible()
  38 |     });
  39 |     // Need to remove the page since we are already using a global variable
  40 |     test('Acess Orders', async () => {
  41 |         await page.goto('/my-account/')
  42 |         await page.locator("li a[href*='orders']").click();
  43 |         await expect(page).toHaveURL(/.*orders/);
  44 |     });
  45 |
  46 |     test('Acess Downloads', async () => {
  47 |         await page.goto('/my-account/')
  48 |         await page.locator("li a[href*='downloads']").click();
  49 |         await expect(page).toHaveURL(/.*downloads/);
  50 |     });
  51 | })
  52 |
  53 | // Using global setup
  54 | test.describe('My Account Global Setup', () => {
  55 |    
  56 |     test('Acess Orders', async ({page}) => {
  57 |         await page.goto('/my-account/')
  58 |         await page.locator("li a[href*='orders']").click();
  59 |         await expect(page).toHaveURL(/.*orders/);
  60 |     });
  61 |
  62 |     test('Acess Downloads', async ({page}) => {
  63 |         await page.goto('/my-account/')
  64 |         await page.locator("li a[href*='downloads']").click();
  65 |         await expect(page).toHaveURL(/.*downloads/);
  66 |     });
  67 | })
  68 |
  69 |
  70 | test.describe('Account Page Visible', () => {
  71 |     test.use({storageState: 'notLoggedInState.json'})
  72 |     
  73 |     test('Verify login and register is visible',async ({page}) => {
  74 |         await page.goto('/my-account')
  75 |         await expect(page.locator('h2:has-text("Login")')).toBeVisible();
  76 |         await expect(page.locator('h2:has-text("Register")')).toBeVisible();
  77 |     });
  78 | });
```